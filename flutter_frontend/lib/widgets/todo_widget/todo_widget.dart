import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../common/glass_card.dart';
import '../../core/theme/dark_theme.dart';
import '../../repositories/repository_provider.dart';
import '../../repositories/todo_repository.dart';

class TodoWidget extends StatefulWidget {
  const TodoWidget({super.key});

  @override
  State<TodoWidget> createState() => _TodoWidgetState();
}

class _TodoWidgetState extends State<TodoWidget> {
  final TextEditingController _addTodoController = TextEditingController();
  String? _error;

  @override
  void dispose() {
    _addTodoController.dispose();
    super.dispose();
  }

  Future<void> _toggleTodoItem(TodoItem item) async {
    try {
      final todoRepository = Provider.of<RepositoryProvider>(context, listen: false).todoRepository;
      await todoRepository.toggleTodo(item.id);
    } catch (e) {
      setState(() {
        _error = 'Failed to toggle todo: $e';
      });
    }
  }

  Future<void> _addTodo() async {
    final title = _addTodoController.text.trim();
    if (title.isEmpty) return;

    try {
      final todoRepository = Provider.of<RepositoryProvider>(context, listen: false).todoRepository;
      final newTodo = TodoItem(
        id: '', // Will be generated by repository
        title: title,
        description: '',
        category: 'general',
        priority: 'medium',
        status: 'pending',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      
      await todoRepository.addTodo(newTodo);
      _addTodoController.clear();
      
      setState(() {
        _error = null;
      });
    } catch (e) {
      setState(() {
        _error = 'Failed to add todo: $e';
      });
    }
  }

  Future<void> _deleteTodo(String id) async {
    try {
      final todoRepository = Provider.of<RepositoryProvider>(context, listen: false).todoRepository;
      await todoRepository.deleteTodo(id);
      
      setState(() {
        _error = null;
      });
    } catch (e) {
      setState(() {
        _error = 'Failed to delete todo: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return GlassInfoCard(
      title: 'Tasks',
      icon: const Icon(
        Icons.checklist_rounded,
        color: DarkThemeData.successColor,
        size: 20,
      ),
      accentColor: DarkThemeData.successColor,
      child: Consumer<RepositoryProvider>(
        builder: (context, repositoryProvider, child) {
          if (!repositoryProvider.isInitialized) {
            return const Center(
              child: CircularProgressIndicator(
                strokeWidth: 2,
                color: DarkThemeData.successColor,
              ),
            );
          }

          return StreamBuilder<List<TodoItem>>(
            stream: repositoryProvider.todoRepository.getTodos(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    color: DarkThemeData.successColor,
                  ),
                );
              }

              if (snapshot.hasError) {
                return Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.error_outline,
                        size: 32,
                        color: DarkThemeData.errorColor,
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Error: ${snapshot.error}',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: DarkThemeData.errorColor,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      if (_error != null)
                        Padding(
                          padding: const EdgeInsets.only(top: 4),
                          child: Text(
                            _error!,
                            style: Theme.of(context).textTheme.bodySmall?.copyWith(
                              color: DarkThemeData.warningColor,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                    ],
                  ),
                );
              }

              final todoItems = snapshot.data ?? [];
              
              if (todoItems.isEmpty) {
                return Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.task_alt_rounded,
                      size: 32,
                      color: Theme.of(context).textTheme.bodyMedium?.color?.withValues(alpha: 0.5),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'No tasks yet',
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        color: Theme.of(context).textTheme.bodyMedium?.color?.withValues(alpha: 0.7),
                      ),
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _addTodoController,
                            decoration: InputDecoration(
                              hintText: 'Add a new task...',
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(8),
                                borderSide: const BorderSide(color: Color(0xFF334155)),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(8),
                                borderSide: const BorderSide(color: Color(0xFF334155)),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(8),
                                borderSide: const BorderSide(color: DarkThemeData.successColor),
                              ),
                              contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                            onSubmitted: (_) => _addTodo(),
                          ),
                        ),
                        const SizedBox(width: 8),
                        IconButton(
                          onPressed: _addTodo,
                          icon: const Icon(Icons.add_rounded),
                          style: IconButton.styleFrom(
                            backgroundColor: DarkThemeData.successColor,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.all(8),
                          ),
                        ),
                      ],
                    ),
                  ],
                );
              }

              return Column(
                children: [
                  // Add todo input at top when there are todos
                  Padding(
                    padding: const EdgeInsets.only(bottom: 16),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _addTodoController,
                            decoration: InputDecoration(
                              hintText: 'Add a new task...',
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(8),
                                borderSide: const BorderSide(color: Color(0xFF334155)),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(8),
                                borderSide: const BorderSide(color: Color(0xFF334155)),
                              ),
                              focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(8),
                                borderSide: const BorderSide(color: DarkThemeData.successColor),
                              ),
                              contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            ),
                            onSubmitted: (_) => _addTodo(),
                          ),
                        ),
                        const SizedBox(width: 8),
                        IconButton(
                          onPressed: _addTodo,
                          icon: const Icon(Icons.add_rounded),
                          style: IconButton.styleFrom(
                            backgroundColor: DarkThemeData.successColor,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.all(8),
                          ),
                        ),
                      ],
                    ),
                  ),
                  
                  // Todo list
                  Expanded(
                    child: ListView.separated(
                      physics: const BouncingScrollPhysics(),
                      itemCount: todoItems.length,
                      separatorBuilder: (context, index) => const Divider(
                        height: 1,
                        thickness: 0.5,
                        color: Color(0xFF334155),
                      ),
                      itemBuilder: (context, i) {
                        final todo = todoItems[i];
                        return InkWell(
                          onTap: () => _toggleTodoItem(todo),
                          borderRadius: BorderRadius.circular(8),
                          child: Container(
                            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
                            child: Row(
                              children: [
                                AnimatedContainer(
                                  duration: const Duration(milliseconds: 200),
                                  padding: const EdgeInsets.all(2),
                                  decoration: BoxDecoration(
                                    color: todo.isCompleted
                                        ? DarkThemeData.successColor.withValues(alpha: 0.1)
                                        : Colors.transparent,
                                    borderRadius: BorderRadius.circular(12),
                                    border: Border.all(
                                      color: todo.isCompleted
                                          ? DarkThemeData.successColor
                                          : Theme.of(context).colorScheme.outline,
                                      width: 1,
                                    ),
                                  ),
                                  child: AnimatedSwitcher(
                                    duration: const Duration(milliseconds: 200),
                                    child: Icon(
                                      todo.isCompleted
                                          ? Icons.check_rounded
                                          : Icons.radio_button_unchecked_rounded,
                                      key: ValueKey(todo.isCompleted),
                                      color: todo.isCompleted
                                          ? DarkThemeData.successColor
                                          : Theme.of(context).colorScheme.outline,
                                      size: 16,
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: AnimatedDefaultTextStyle(
                                    duration: const Duration(milliseconds: 200),
                                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                                      decoration: todo.isCompleted
                                          ? TextDecoration.lineThrough
                                          : null,
                                      color: todo.isCompleted
                                          ? Theme.of(context).textTheme.bodySmall?.color
                                          : Theme.of(context).textTheme.titleSmall?.color,
                                      fontWeight: FontWeight.w500,
                                    ) ?? const TextStyle(),
                                    child: Text(
                                      todo.title,
                                      maxLines: 2,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                ),
                                IconButton(
                                  onPressed: () => _deleteTodo(todo.id),
                                  icon: const Icon(Icons.delete_outline_rounded),
                                  iconSize: 18,
                                  style: IconButton.styleFrom(
                                    foregroundColor: Theme.of(context).colorScheme.outline,
                                    padding: const EdgeInsets.all(4),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              );
            },
          );
        },
      ),
    );
  }
}