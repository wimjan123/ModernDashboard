import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'dart:async';
import '../common/glass_card.dart';
import '../common/error_boundary.dart';
import '../../core/theme/dark_theme.dart';
import '../../repositories/repository_provider.dart';
import '../../repositories/todo_repository.dart';
import '../../core/services/web_compatibility_service.dart';

class TodoWidget extends StatefulWidget {
  const TodoWidget({super.key});

  @override
  State<TodoWidget> createState() => _TodoWidgetState();
}

class _TodoWidgetState extends State<TodoWidget> {
  final TextEditingController _addTodoController = TextEditingController();
  String? _error;
  bool _isOfflineMode = false;
  int _retryCount = 0;

  // Error categorization cache
  final Map<String, String> _errorCategoryCache = {};

  // Offline mode check debouncing
  Timer? _offlineModeCheckTimer;
  DateTime? _lastOfflineModeCheck;
  static const Duration _offlineModeCheckDebounce = Duration(seconds: 2);

  @override
  void dispose() {
    _addTodoController.dispose();
    _offlineModeCheckTimer?.cancel();
    super.dispose();
  }

  Future<void> _toggleTodoItem(TodoItem item) async {
    final repositoryProvider =
        Provider.of<RepositoryProvider>(context, listen: false);
    await repositoryProvider.todoRepository.toggleTodo(item.id);

    setState(() {
      _error = null;
    });
  }

  Future<void> _addTodo() async {
    final title = _addTodoController.text.trim();
    if (title.isEmpty) return;

    final repositoryProvider =
        Provider.of<RepositoryProvider>(context, listen: false);
    final newTodo = TodoItem(
      id: '', // Will be generated by repository
      title: title,
      description: '',
      category: 'general',
      priority: 'medium',
      status: 'pending',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    await repositoryProvider.todoRepository.addTodo(newTodo);
    _addTodoController.clear();

    setState(() {
      _error = null;
    });
  }

  Future<void> _deleteTodo(String id) async {
    final repositoryProvider =
        Provider.of<RepositoryProvider>(context, listen: false);
    await repositoryProvider.todoRepository.deleteTodo(id);

    setState(() {
      _error = null;
    });
  }

  String _categorizeError(String operation, dynamic error) {
    final errorString = error.toString().toLowerCase();
    final cacheKey = '$operation:${errorString.hashCode}';

    // Check cache first for performance optimization
    if (_errorCategoryCache.containsKey(cacheKey)) {
      return _errorCategoryCache[cacheKey]!;
    }

    String categorizedError;

    if (errorString.contains('javascriptobject') ||
        errorString.contains('typeerror') ||
        errorString.contains('interop')) {
      categorizedError =
          'Data processing error while trying to $operation. This might be due to a browser compatibility issue.';
    } else if (errorString.contains('socket') ||
        errorString.contains('network') ||
        errorString.contains('connection')) {
      categorizedError =
          'Connection error while trying to $operation. Please check your internet connection.';
    } else if (errorString.contains('permission') ||
        errorString.contains('unauthorized') ||
        errorString.contains('forbidden')) {
      categorizedError =
          'Permission error while trying to $operation. Please check your account settings.';
    } else {
      categorizedError = 'Failed to $operation: ${error.toString()}';
    }

    // Cache the result for future use
    _errorCategoryCache[cacheKey] = categorizedError;

    // Limit cache size to prevent memory leaks
    if (_errorCategoryCache.length > 50) {
      final firstKey = _errorCategoryCache.keys.first;
      _errorCategoryCache.remove(firstKey);
    }

    return categorizedError;
  }

  Future<void> _checkForOfflineMode(dynamic error) async {
    final now = DateTime.now();

    // Debounce offline mode checks to prevent excessive calls
    if (_lastOfflineModeCheck != null &&
        now.difference(_lastOfflineModeCheck!) < _offlineModeCheckDebounce) {
      return;
    }

    _lastOfflineModeCheck = now;

    // Cancel any existing timer
    _offlineModeCheckTimer?.cancel();

    // Set up debounced offline mode check
    _offlineModeCheckTimer = Timer(_offlineModeCheckDebounce, () async {
      // Use WebCompatibilityService for more accurate web-specific error detection
      final webCompatService = WebCompatibilityService.instance;
      
      // Check if WebCompatibilityService identifies this as a known Firebase interop issue
      final isWebInteropIssue = webCompatService.isKnownFirebaseInteropIssue(error);
      
      // Legacy detection for backwards compatibility
      final errorString = error.toString().toLowerCase();
      final isLegacyWebIssue = errorString.contains('javascriptobject') ||
          errorString.contains('typeerror') ||
          errorString.contains('interop');

      // Check for serialization errors or persistent connection issues
      if (isWebInteropIssue || isLegacyWebIssue) {
        _retryCount++;

        if (_retryCount >= 3 && !_isOfflineMode) {
          final repositoryProvider =
              Provider.of<RepositoryProvider>(context, listen: false);
          await repositoryProvider.switchToOfflineMode();

          if (mounted) {
            // Get web-specific recommendations if available
            final recommendations = webCompatService.getRecommendedFixes();
            final offlineRecommendation = recommendations['offline_mode'] ?? 
                'Switched to offline mode due to data processing issues.';
            
            setState(() {
              _isOfflineMode = true;
              _error = '$offlineRecommendation You can still view and modify todos locally.';
            });
          }
        }
      }
    });
  }

  Future<void> _retryOnline() async {
    final repositoryProvider =
        Provider.of<RepositoryProvider>(context, listen: false);
    await repositoryProvider.switchToOnlineMode();

    setState(() {
      _isOfflineMode = false;
      _error = null;
      _retryCount = 0;
    });
  }

  Widget _buildErrorWidget(String error) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: DarkThemeData.errorColor.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: DarkThemeData.errorColor.withValues(alpha: 0.3),
        ),
      ),
      child: Row(
        children: [
          Icon(
            Icons.warning_outlined,
            color: DarkThemeData.errorColor,
            size: 20,
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  error,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: DarkThemeData.errorColor,
                      ),
                ),
                if (_isOfflineMode) ...[
                  const SizedBox(height: 8),
                  ElevatedButton.icon(
                    onPressed: _retryOnline,
                    icon: const Icon(Icons.refresh, size: 16),
                    label: const Text('Try Online Mode'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: DarkThemeData.successColor,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 6,
                      ),
                      textStyle: Theme.of(context).textTheme.bodySmall,
                    ),
                  ),
                ],
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return ErrorBoundary(
      context: 'TodoWidget',
      displayMode: ErrorDisplayMode.detailed,
      onRetry: () {
        setState(() {
          _error = null;
          _retryCount = 0;
        });
      },
      child: GlassInfoCard(
        title: 'Tasks',
        icon: const Icon(
          Icons.checklist_rounded,
          color: DarkThemeData.successColor,
          size: 20,
        ),
        accentColor: DarkThemeData.successColor,
        child: Column(
          children: [
            if (_error != null) _buildErrorWidget(_error!),
            Expanded(
              child: Consumer<RepositoryProvider>(
                builder: (context, repositoryProvider, child) {
                  if (!repositoryProvider.isInitialized) {
                    return const Center(
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        color: DarkThemeData.successColor,
                      ),
                    );
                  }

                  return StreamBuilder<List<TodoItem>>(
                    stream: repositoryProvider.todoRepository.getTodos(),
                    builder: (context, snapshot) {
                      if (snapshot.connectionState == ConnectionState.waiting) {
                        return const Center(
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            color: DarkThemeData.successColor,
                          ),
                        );
                      }

                      if (snapshot.hasError) {
                        final error = snapshot.error;
                        final errorMessage =
                            _categorizeError('load todos', error);

                        return Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(
                                Icons.error_outline,
                                size: 32,
                                color: DarkThemeData.errorColor,
                              ),
                              const SizedBox(height: 8),
                              Text(
                                errorMessage,
                                style: Theme.of(context)
                                    .textTheme
                                    .bodySmall
                                    ?.copyWith(
                                      color: DarkThemeData.errorColor,
                                    ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(height: 16),
                              Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  ElevatedButton.icon(
                                    onPressed: () {
                                      setState(() {
                                        _error = null;
                                        _retryCount = 0;
                                      });
                                    },
                                    icon: const Icon(Icons.refresh, size: 16),
                                    label: const Text('Retry'),
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor:
                                          DarkThemeData.successColor,
                                    ),
                                  ),
                                  if (!_isOfflineMode) ...[
                                    const SizedBox(width: 8),
                                    ElevatedButton.icon(
                                      onPressed: () async {
                                        await repositoryProvider
                                            .switchToOfflineMode();
                                        setState(() {
                                          _isOfflineMode = true;
                                          _error =
                                              'Switched to offline mode. You can view cached todos.';
                                        });
                                      },
                                      icon: const Icon(Icons.offline_bolt,
                                          size: 16),
                                      label: const Text('Go Offline'),
                                      style: ElevatedButton.styleFrom(
                                        backgroundColor:
                                            DarkThemeData.warningColor,
                                      ),
                                    ),
                                  ],
                                ],
                              ),
                            ],
                          ),
                        );
                      }

                      final todoItems = snapshot.data ?? [];

                      if (todoItems.isEmpty) {
                        return Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.task_alt_rounded,
                              size: 32,
                              color: Theme.of(context)
                                  .textTheme
                                  .bodyMedium
                                  ?.color
                                  ?.withValues(alpha: 0.5),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'No tasks yet',
                              style: Theme.of(context)
                                  .textTheme
                                  .bodyMedium
                                  ?.copyWith(
                                    color: Theme.of(context)
                                        .textTheme
                                        .bodyMedium
                                        ?.color
                                        ?.withValues(alpha: 0.7),
                                  ),
                            ),
                            const SizedBox(height: 16),
                            Row(
                              children: [
                                Expanded(
                                  child: TextField(
                                    controller: _addTodoController,
                                    decoration: InputDecoration(
                                      hintText: 'Add a new task...',
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                        borderSide: const BorderSide(
                                            color: Color(0xFF334155)),
                                      ),
                                      enabledBorder: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                        borderSide: const BorderSide(
                                            color: Color(0xFF334155)),
                                      ),
                                      focusedBorder: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                        borderSide: const BorderSide(
                                            color: DarkThemeData.successColor),
                                      ),
                                      contentPadding:
                                          const EdgeInsets.symmetric(
                                              horizontal: 12, vertical: 8),
                                    ),
                                    onSubmitted: (_) => _addTodo(),
                                  ),
                                ),
                                const SizedBox(width: 8),
                                IconButton(
                                  onPressed: _addTodo,
                                  icon: const Icon(Icons.add_rounded),
                                  style: IconButton.styleFrom(
                                    backgroundColor: DarkThemeData.successColor,
                                    foregroundColor: Colors.white,
                                    padding: const EdgeInsets.all(8),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        );
                      }

                      return Column(
                        children: [
                          // Add todo input at top when there are todos
                          Padding(
                            padding: const EdgeInsets.only(bottom: 16),
                            child: Row(
                              children: [
                                Expanded(
                                  child: TextField(
                                    controller: _addTodoController,
                                    decoration: InputDecoration(
                                      hintText: 'Add a new task...',
                                      border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                        borderSide: const BorderSide(
                                            color: Color(0xFF334155)),
                                      ),
                                      enabledBorder: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                        borderSide: const BorderSide(
                                            color: Color(0xFF334155)),
                                      ),
                                      focusedBorder: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(8),
                                        borderSide: const BorderSide(
                                            color: DarkThemeData.successColor),
                                      ),
                                      contentPadding:
                                          const EdgeInsets.symmetric(
                                              horizontal: 12, vertical: 8),
                                    ),
                                    onSubmitted: (_) => _addTodo(),
                                  ),
                                ),
                                const SizedBox(width: 8),
                                IconButton(
                                  onPressed: _addTodo,
                                  icon: const Icon(Icons.add_rounded),
                                  style: IconButton.styleFrom(
                                    backgroundColor: DarkThemeData.successColor,
                                    foregroundColor: Colors.white,
                                    padding: const EdgeInsets.all(8),
                                  ),
                                ),
                              ],
                            ),
                          ),

                          // Todo list
                          Expanded(
                            child: ListView.separated(
                              physics: const BouncingScrollPhysics(),
                              itemCount: todoItems.length,
                              separatorBuilder: (context, index) =>
                                  const Divider(
                                height: 1,
                                thickness: 0.5,
                                color: Color(0xFF334155),
                              ),
                              itemBuilder: (context, i) {
                                final todo = todoItems[i];
                                return InkWell(
                                  onTap: () => _toggleTodoItem(todo),
                                  borderRadius: BorderRadius.circular(8),
                                  child: Container(
                                    padding: const EdgeInsets.symmetric(
                                        vertical: 12, horizontal: 8),
                                    child: Row(
                                      children: [
                                        AnimatedContainer(
                                          duration:
                                              const Duration(milliseconds: 200),
                                          padding: const EdgeInsets.all(2),
                                          decoration: BoxDecoration(
                                            color: todo.isCompleted
                                                ? DarkThemeData.successColor
                                                    .withValues(alpha: 0.1)
                                                : Colors.transparent,
                                            borderRadius:
                                                BorderRadius.circular(12),
                                            border: Border.all(
                                              color: todo.isCompleted
                                                  ? DarkThemeData.successColor
                                                  : Theme.of(context)
                                                      .colorScheme
                                                      .outline,
                                              width: 1,
                                            ),
                                          ),
                                          child: AnimatedSwitcher(
                                            duration: const Duration(
                                                milliseconds: 200),
                                            child: Icon(
                                              todo.isCompleted
                                                  ? Icons.check_rounded
                                                  : Icons
                                                      .radio_button_unchecked_rounded,
                                              key: ValueKey(todo.isCompleted),
                                              color: todo.isCompleted
                                                  ? DarkThemeData.successColor
                                                  : Theme.of(context)
                                                      .colorScheme
                                                      .outline,
                                              size: 16,
                                            ),
                                          ),
                                        ),
                                        const SizedBox(width: 12),
                                        Expanded(
                                          child: AnimatedDefaultTextStyle(
                                            duration: const Duration(
                                                milliseconds: 200),
                                            style: Theme.of(context)
                                                    .textTheme
                                                    .titleSmall
                                                    ?.copyWith(
                                                      decoration:
                                                          todo.isCompleted
                                                              ? TextDecoration
                                                                  .lineThrough
                                                              : null,
                                                      color: todo.isCompleted
                                                          ? Theme.of(context)
                                                              .textTheme
                                                              .bodySmall
                                                              ?.color
                                                          : Theme.of(context)
                                                              .textTheme
                                                              .titleSmall
                                                              ?.color,
                                                      fontWeight:
                                                          FontWeight.w500,
                                                    ) ??
                                                const TextStyle(),
                                            child: Text(
                                              todo.title,
                                              maxLines: 2,
                                              overflow: TextOverflow.ellipsis,
                                            ),
                                          ),
                                        ),
                                        IconButton(
                                          onPressed: () => _deleteTodo(todo.id),
                                          icon: const Icon(
                                              Icons.delete_outline_rounded),
                                          iconSize: 18,
                                          style: IconButton.styleFrom(
                                            foregroundColor: Theme.of(context)
                                                .colorScheme
                                                .outline,
                                            padding: const EdgeInsets.all(4),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                );
                              },
                            ),
                          ),
                        ],
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
